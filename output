/*************************************************************************
 *  Compilation:  javac PowersOfTwo.java
 *  Execution:    java PowersOfTwo N
 *  
 *  This program takes a command-line argument N and prnts a table of
 *  the powers of 2 that are less than or equal to 2^N.
 *
 *  % java PowersOfTwo 5
 *  0 1
 *  1 2
 *  2 4
 *  3 8
 *  4 16
 *  5 32
 *
 *  % java PowersOfTwo 6
 *  0 1
 *  1 2
 *  2 4
 *  3 8
 *  4 16
 *  5 32
 *  6 64
 *
 *  Remarks
 *  ------------
 *  Only works if 0 <= N < 31 since 2^31 overflows an int.
 *
 *************************************************************************/		//COMMENT 
		//
public class PowersOfTwo {		//PUBLIC CLASS IDENTIFIER LCURPAREN 
    public static void main(String[] args) {		//PUBLIC STATIC VOID IDENTIFIER LROUNPAREN IDENTIFIER LSQPAREN RSQPAREN IDENTIFIER RROUNPAREN LCURPAREN 
		//
        // read in one command-line argument		//COMMENT 
        int N = Integer.parseInt(args[0]);		//INT IDENTIFIER OPERATOR IDENTIFIER DOT IDENTIFIER LROUNPAREN IDENTIFIER LSQPAREN INT_CONST RSQPAREN RROUNPAREN SEMICOLON 
		//
        int i = 0;                // count from 0 to N-1		//INT IDENTIFIER OPERATOR INT_CONST SEMICOLON COMMENT 
        int powerOfTwo = 1;       // the ith power of two		//INT IDENTIFIER OPERATOR INT_CONST SEMICOLON COMMENT 
		//
        // repeat until i equals N		//COMMENT 
        while (i <= N) {		//WHILE LROUNPAREN IDENTIFIER OPERATOR IDENTIFIER RROUNPAREN LCURPAREN 
            System.out.println(i + " " + powerOfTwo);   // print out the power of two		//IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER LROUNPAREN IDENTIFIER OPERATOR STRING OPERATOR IDENTIFIER RROUNPAREN SEMICOLON COMMENT 
            powerOfTwo = 2 * powerOfTwo;                // double to get the next one		//IDENTIFIER OPERATOR INT_CONST OPERATOR IDENTIFIER SEMICOLON COMMENT 
            i = i + 1;		//IDENTIFIER OPERATOR IDENTIFIER OPERATOR INT_CONST SEMICOLON 
        }		//RCURPAREN 
		//
    }		//RCURPAREN 
}		//RCURPAREN 
